{"version":3,"sources":["components/Loader/Loader.module.css","services/searchImg-api.js","components/Searchbar/Searchbar.tsx","components/ImageGalleryItem/ImageGalleryItem.tsx","components/ImageGallery/ImageGallery.tsx","components/Button/Button.tsx","components/Loader/Loader.jsx","components/Modal/Modal.tsx","App.tsx","index.js"],"names":["module","exports","axios","defaults","baseURL","searchQuery","currentPage","perPage","get","then","data","hits","SearchBar","onSubmit","useState","query","setQuery","className","e","preventDefault","type","value","autoComplete","autoFocus","placeholder","onChange","currentTarget","ImageGalleryItem","webformatURL","largeImageURL","onClick","src","alt","ImageGallery","images","map","id","Button","Loader","styles","spinner","color","height","width","modalRoot","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","target","App","setImages","setCurrentPage","setSearchQuery","isLoading","setIsLoading","error","setError","largeImgUrl","setLargeImgUrl","fetchArticles","options","searchImgApi","imgData","prState","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","shouldRenderLoadMoreBtn","length","Searchbar","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5372bc65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Loader_spinner__3nzKF\"};","import axios from 'axios';\n\nconst API_KEY = '20192065-3084c849aae1164575ffb5a21';\naxios.defaults.baseURL = 'https://pixabay.com/api';\n\nconst fetchImages = ({\n  searchQuery = 'nature',\n  currentPage = 1,\n  perPage = 15,\n}) => {\n  return axios\n    .get(\n      `/?q=${searchQuery}&page=${currentPage}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=${perPage}`,\n    )\n    .then(({ data: { hits } }) => hits);\n};\n\n// eslint-disable-next-line\nexport default { fetchImages };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\ninterface IProps {\n  onSubmit: (query: string) => void;\n}\n\nconst SearchBar = ({ onSubmit }: IProps) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          className=\"SearchForm-input\"\n          value={query}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","// import PropTypes from 'prop-types';\n\ninterface IImage {\n  webformatURL: string;\n  largeImageURL: string;\n  onClick: (data: string) => void;\n}\n\nconst ImageGalleryItem = ({ webformatURL, largeImageURL, onClick }: IImage) => {\n  const handleClick = () => {\n    onClick(largeImageURL);\n  };\n\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        onClick={handleClick}\n        src={webformatURL}\n        alt=\"something went wrong\"\n        className=\"ImageGalleryItem-image\"\n      />\n    </li>\n  );\n};\n\n// ImageGalleryItem.propTypes = {\n//   webformatURL: PropTypes.string.isRequired,\n//   largeImageURL: PropTypes.string.isRequired,\n//   onClick: PropTypes.func.isRequired,\n// };\n\nexport default ImageGalleryItem;\n","import ImageGalleryItem from '../ImageGalleryItem';\n// import PropTypes from 'prop-types';\n\ninterface IImage {\n  id: string | number;\n  webformatURL: string;\n  largeImageURL: string;\n  [n: string]: any;\n}\n\ninterface IGallery {\n  images: IImage[];\n  onClick: (data: string) => void;\n}\n\nconst ImageGallery = ({ images, onClick }: IGallery) => {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(({ id, webformatURL, largeImageURL }) => (\n        <ImageGalleryItem\n          onClick={onClick}\n          key={id}\n          webformatURL={webformatURL}\n          largeImageURL={largeImageURL}\n        />\n      ))}\n    </ul>\n  );\n};\n\n// ImageGallery.propTypes = {\n//   images: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.number.isRequired,\n//     }),\n//   ).isRequired,\n// };\n\nexport default ImageGallery;\n","import PropTypes from 'prop-types';\n\ninterface IButton {\n  onClick: () => void;\n}\n\nconst Button = ({ onClick }: IButton) => {\n  return (\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\n      Load more\n    </button>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import Spinner from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <Spinner\n      className={styles.spinner}\n      type=\"Oval\"\n      color=\"#3f51b5\"\n      height={50}\n      width={50}\n    />\n  );\n};\n\nexport default Loader;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n// import PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root') as HTMLElement;\n\ninterface IModal {\n  onClose: () => void;\n  children?: React.ReactNode;\n}\n\nconst Modal = ({ onClose, children }: IModal) => {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\n      <div className=\"Modal\">{children}</div>\n    </div>,\n    modalRoot,\n  );\n};\n\n// Modal.defaultProps = {\n//   children: null,\n// };\n\n// Modal.propTypes = {\n//   onClose: PropTypes.func.isRequired,\n//   children: PropTypes.node,\n// };\n\nexport default Modal;\n","import { useState, useEffect } from 'react';\nimport searchImgApi from './services/searchImg-api';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Loader from './components/Loader';\nimport Modal from './components/Modal';\n\ninterface IImage {\n  id: string | number;\n  webformatURL: string;\n  largeImageURL: string;\n  [n: string]: any;\n}\n\nfunction App() {\n  const [images, setImages] = useState<any[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [largeImgUrl, setLargeImgUrl] = useState<string>('');\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    fetchArticles();\n    // eslint-disable-next-line\n  }, [searchQuery]);\n\n  const onChangeQuery = (query: string) => {\n    setSearchQuery(query);\n    setImages([]);\n    setCurrentPage(1);\n    setError(null);\n  };\n\n  const fetchArticles = () => {\n    const options = { currentPage, searchQuery };\n    setIsLoading(true);\n\n    searchImgApi\n      .fetchImages(options)\n      .then(hits => {\n        const imgData = hits.map(\n          ({ id, webformatURL, largeImageURL }: IImage) => ({\n            id,\n            webformatURL,\n            largeImageURL,\n          }),\n        );\n        setImages(prState => [...prState, ...imgData]);\n        setCurrentPage(prState => prState + 1);\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      })\n      .catch(error => setError(error))\n      .finally(() => setIsLoading(false));\n  };\n\n  const openModal = (data: string) => {\n    setLargeImgUrl(data);\n  };\n\n  const closeModal = () => {\n    setLargeImgUrl('');\n  };\n\n  const shouldRenderLoadMoreBtn = images.length > 0 && !isLoading;\n\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={onChangeQuery} />\n      {error && <h2>Ой, ошибка, все пропало (((</h2>}\n      <ImageGallery images={images} onClick={openModal} />\n      {isLoading && <Loader />}\n      {shouldRenderLoadMoreBtn && <Button onClick={fetchArticles} />}\n      {largeImgUrl && (\n        <Modal onClose={closeModal}>\n          <img src={largeImgUrl} alt=\"Большое изображение\" />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}